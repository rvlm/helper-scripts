"""
"""
import itertools
import re
import numpy
from rvlm.labhelpers.trivia import omit_empty_items


def read_agilent_waveform(source):
    """
    Reads data from file generated by Agilent oscilloscope. This function reads
    given `stream`, parses it, and reads into a `numpy` array.

    :param source:
        File object or string. If `source` is file object, data is read
        directly from it, without adjusting cursor position before or after
        reading. If `source` is string, then it's interpreted as a filename,
        and a file with that name get automatically open.

    :returns:
        Waveform as 2D-array, where rows contain two items: argument and its
        corresponding waveform function value. If reading ended unexpectedly,
        :const:`None` gets returned.

    :raises:
        This function probably can raise literally any error on failure. This
        should be fixed in next releases.

    """
    if type(source) is str:
        with open(source) as f:
            return read_agilent_waveform(f)

    try:
        iterator = iter(source)
        iterator = itertools.dropwhile(lambda s: s.strip() != "Data,", iterator)
        next(iterator)
        return numpy.loadtxt(iterator, delimiter=", ")

    except StopIteration:
        return None


def read_cst_ascii(source):
    """
    Reads data from ASCII data file, exported by CST Microwave Studio. Since
    CST can put multiple signals into a single file, this function returns
    a hash of signals, where signal names are keys.
    """
    if type(source) is str:
        with open(source) as f:
            return read_cst_ascii(f)

    header_regex = re.compile('\\s\\s+')
    result = {}
    try:
        iterator = iter(source)
        while True:
            section = itertools.takewhile(lambda s: s.strip() != "", iterator)
            header  = next(section).strip()
            (xhdr, yhdr) = omit_empty_items(header_regex.split(header))

            separator_line = next(section)
            separator_line = separator_line.strip()
            if not all(map(lambda ch: ch == '-', separator_line)):
                break

            result[yhdr] = numpy.loadtxt(section)

    except StopIteration:
        pass

    return result
